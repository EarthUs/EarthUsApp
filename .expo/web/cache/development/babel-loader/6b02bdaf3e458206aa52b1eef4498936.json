{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/jangsohyeon/Desktop/EarthUsApp/node_modules/react-native-platform-touchable/PlatformTouchable.js\";\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nvar TouchableComponent;\n\nif (Platform.OS === 'android') {\n  TouchableComponent = Platform.Version <= 20 ? TouchableOpacity : TouchableNativeFeedback;\n} else {\n  TouchableComponent = TouchableOpacity;\n}\n\nif (TouchableComponent !== TouchableNativeFeedback) {\n  TouchableComponent.SelectableBackground = function () {\n    return {};\n  };\n\n  TouchableComponent.SelectableBackgroundBorderless = function () {\n    return {};\n  };\n\n  TouchableComponent.Ripple = function () {\n    return {};\n  };\n\n  TouchableComponent.canUseNativeForeground = function () {\n    return false;\n  };\n}\n\nvar PlatformTouchable = function (_React$Component) {\n  _inherits(PlatformTouchable, _React$Component);\n\n  function PlatformTouchable() {\n    _classCallCheck(this, PlatformTouchable);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PlatformTouchable).apply(this, arguments));\n  }\n\n  _createClass(PlatformTouchable, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          style = _this$props.style,\n          foreground = _this$props.foreground,\n          background = _this$props.background,\n          useForeground = _this$props.useForeground,\n          props = _objectWithoutProperties(_this$props, [\"children\", \"style\", \"foreground\", \"background\", \"useForeground\"]);\n\n      children = React.Children.only(children);\n\n      if (TouchableComponent === TouchableNativeFeedback) {\n        useForeground = foreground && TouchableNativeFeedback.canUseNativeForeground();\n\n        if (foreground && background) {\n          console.warn('Specified foreground and background for Touchable, only one can be used at a time. Defaulted to foreground.');\n        }\n\n        return React.createElement(TouchableComponent, _extends({}, props, {\n          useForeground: useForeground,\n          background: useForeground && foreground || background,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          }\n        }), React.createElement(View, {\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          }\n        }, children));\n      } else if (TouchableComponent === TouchableWithoutFeedback) {\n        return React.createElement(TouchableWithoutFeedback, _extends({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          }\n        }), React.createElement(View, {\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          }\n        }, children));\n      } else {\n        var TouchableFallback = this.props.fallback || TouchableComponent;\n        return React.createElement(TouchableFallback, _extends({}, props, {\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          }\n        }), children);\n      }\n    }\n  }]);\n\n  return PlatformTouchable;\n}(React.Component);\n\nPlatformTouchable.SelectableBackground = TouchableComponent.SelectableBackground;\nPlatformTouchable.SelectableBackgroundBorderless = TouchableComponent.SelectableBackgroundBorderless;\nPlatformTouchable.Ripple = TouchableComponent.Ripple;\nPlatformTouchable.canUseNativeForeground = TouchableComponent.canUseNativeForeground;\nexport { PlatformTouchable as default };","map":{"version":3,"sources":["/Users/jangsohyeon/Desktop/EarthUsApp/node_modules/react-native-platform-touchable/PlatformTouchable.js"],"names":["React","TouchableComponent","Platform","OS","Version","TouchableOpacity","TouchableNativeFeedback","SelectableBackground","SelectableBackgroundBorderless","Ripple","canUseNativeForeground","PlatformTouchable","props","children","style","foreground","background","useForeground","Children","only","console","warn","TouchableWithoutFeedback","TouchableFallback","fallback","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AASA,IAAIC,kBAAJ;;AAEA,IAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7BF,EAAAA,kBAAkB,GAChBC,QAAQ,CAACE,OAAT,IAAoB,EAApB,GAAyBC,gBAAzB,GAA4CC,uBAD9C;AAED,CAHD,MAGO;AACLL,EAAAA,kBAAkB,GAAGI,gBAArB;AACD;;AAED,IAAIJ,kBAAkB,KAAKK,uBAA3B,EAAoD;AAClDL,EAAAA,kBAAkB,CAACM,oBAAnB,GAA0C;AAAA,WAAO,EAAP;AAAA,GAA1C;;AACAN,EAAAA,kBAAkB,CAACO,8BAAnB,GAAoD;AAAA,WAAO,EAAP;AAAA,GAApD;;AACAP,EAAAA,kBAAkB,CAACQ,MAAnB,GAA4B;AAAA,WAAO,EAAP;AAAA,GAA5B;;AACAR,EAAAA,kBAAkB,CAACS,sBAAnB,GAA4C;AAAA,WAAM,KAAN;AAAA,GAA5C;AACD;;IAEoBC,iB;;;;;;;;;;;6BAMV;AAAA,wBAQH,KAAKC,KARF;AAAA,UAELC,QAFK,eAELA,QAFK;AAAA,UAGLC,KAHK,eAGLA,KAHK;AAAA,UAILC,UAJK,eAILA,UAJK;AAAA,UAKLC,UALK,eAKLA,UALK;AAAA,UAMLC,aANK,eAMLA,aANK;AAAA,UAOFL,KAPE;;AAcPC,MAAAA,QAAQ,GAAGb,KAAK,CAACkB,QAAN,CAAeC,IAAf,CAAoBN,QAApB,CAAX;;AAEA,UAAIZ,kBAAkB,KAAKK,uBAA3B,EAAoD;AAClDW,QAAAA,aAAa,GACXF,UAAU,IAAIT,uBAAuB,CAACI,sBAAxB,EADhB;;AAGA,YAAIK,UAAU,IAAIC,UAAlB,EAA8B;AAC5BI,UAAAA,OAAO,CAACC,IAAR,CACE,6GADF;AAGD;;AAED,eACE,oBAAC,kBAAD,eACMT,KADN;AAEE,UAAA,aAAa,EAAEK,aAFjB;AAGE,UAAA,UAAU,EAAGA,aAAa,IAAIF,UAAlB,IAAiCC,UAH/C;AAAA;AAAA;AAAA;AAAA;AAAA,YAIE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEF,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,WACGD,QADH,CAJF,CADF;AAUD,OApBD,MAoBO,IAAIZ,kBAAkB,KAAKqB,wBAA3B,EAAqD;AAC1D,eACE,oBAAC,wBAAD,eAA8BV,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,YACE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEE,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,WACGD,QADH,CADF,CADF;AAOD,OARM,MAQA;AACL,YAAIU,iBAAiB,GAAG,KAAKX,KAAL,CAAWY,QAAX,IAAuBvB,kBAA/C;AACA,eACE,oBAAC,iBAAD,eAAuBW,KAAvB;AAA8B,UAAA,KAAK,EAAEE,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA,YACGD,QADH,CADF;AAKD;AACF;;;;EA1D4Cb,KAAK,CAACyB,S;;AAAhCd,iB,CACZJ,oB,GAAuBN,kBAAkB,CAACM,oB;AAD9BI,iB,CAEZH,8B,GAAiCP,kBAAkB,CAACO,8B;AAFxCG,iB,CAGZF,M,GAASR,kBAAkB,CAACQ,M;AAHhBE,iB,CAIZD,sB,GAAyBT,kBAAkB,CAACS,sB;SAJhCC,iB","sourcesContent":["import React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\n\nlet TouchableComponent;\n\nif (Platform.OS === 'android') {\n  TouchableComponent =\n    Platform.Version <= 20 ? TouchableOpacity : TouchableNativeFeedback;\n} else {\n  TouchableComponent = TouchableOpacity;\n}\n\nif (TouchableComponent !== TouchableNativeFeedback) {\n  TouchableComponent.SelectableBackground = () => ({});\n  TouchableComponent.SelectableBackgroundBorderless = () => ({});\n  TouchableComponent.Ripple = () => ({});\n  TouchableComponent.canUseNativeForeground = () => false;\n}\n\nexport default class PlatformTouchable extends React.Component {\n  static SelectableBackground = TouchableComponent.SelectableBackground;\n  static SelectableBackgroundBorderless = TouchableComponent.SelectableBackgroundBorderless;\n  static Ripple = TouchableComponent.Ripple;\n  static canUseNativeForeground = TouchableComponent.canUseNativeForeground;\n\n  render() {\n    let {\n      children,\n      style,\n      foreground,\n      background,\n      useForeground,\n      ...props\n    } = this.props;\n\n    // Even though it works for TouchableWithoutFeedback and\n    // TouchableNativeFeedback with this component, we want\n    // the API to be the same for all components so we require\n    // exactly one direct child for every touchable type.\n    children = React.Children.only(children);\n\n    if (TouchableComponent === TouchableNativeFeedback) {\n      useForeground =\n        foreground && TouchableNativeFeedback.canUseNativeForeground();\n\n      if (foreground && background) {\n        console.warn(\n          'Specified foreground and background for Touchable, only one can be used at a time. Defaulted to foreground.'\n        );\n      }\n\n      return (\n        <TouchableComponent\n          {...props}\n          useForeground={useForeground}\n          background={(useForeground && foreground) || background}>\n          <View style={style}>\n            {children}\n          </View>\n        </TouchableComponent>\n      );\n    } else if (TouchableComponent === TouchableWithoutFeedback) {\n      return (\n        <TouchableWithoutFeedback {...props}>\n          <View style={style}>\n            {children}\n          </View>\n        </TouchableWithoutFeedback>\n      );\n    } else {\n      let TouchableFallback = this.props.fallback || TouchableComponent;\n      return (\n        <TouchableFallback {...props} style={style}>\n          {children}\n        </TouchableFallback>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}