{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport invariant from 'invariant';\nvar EventTypes = ['url'];\nvar listeners = [];\n\nfunction _validateURL(url) {\n  invariant(typeof url === 'string', \"Invalid URL: should be a string. Instead found: \" + url);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\n\nvar Linking = function () {\n  function Linking() {\n    _classCallCheck(this, Linking);\n  }\n\n  _createClass(Linking, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener) {\n      invariant(EventTypes.indexOf(type) !== -1, \"Linking.addEventListener(): \" + type + \" is not a valid event\");\n\n      var nativeListener = function nativeListener(nativeEvent) {\n        return listener({\n          url: window.location.href,\n          nativeEvent: nativeEvent\n        });\n      };\n\n      listeners.push({\n        listener: listener,\n        nativeListener: nativeListener\n      });\n      window.addEventListener('message', nativeListener, false);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, listener) {\n      invariant(EventTypes.indexOf(type) !== -1, \"Linking.removeEventListener(): \" + type + \" is not a valid event.\");\n      var listenerIndex = listeners.findIndex(function (pair) {\n        return pair.listener === listener;\n      });\n      invariant(listenerIndex !== -1, 'Linking.removeEventListener(): cannot remove an unregistered event listener.');\n      var nativeListener = listeners[listenerIndex].nativeListener;\n      window.removeEventListener('message', nativeListener, false);\n      listeners.splice(listenerIndex, 1);\n    }\n  }, {\n    key: \"canOpenURL\",\n    value: function canOpenURL(url) {\n      return _regeneratorRuntime.async(function canOpenURL$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _validateURL(url);\n\n              return _context.abrupt(\"return\", true);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getInitialURL\",\n    value: function getInitialURL() {\n      return _regeneratorRuntime.async(function getInitialURL$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", window.location.href);\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"openURL\",\n    value: function openURL(url) {\n      return _regeneratorRuntime.async(function openURL$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _validateURL(url);\n\n              window.location.href = url;\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return Linking;\n}();\n\nexport default new Linking();","map":{"version":3,"sources":["../../src/Linking/LinkingModule.web.ts"],"names":[],"mappings":";;;AAAA,OAAO,SAAP,MAAsB,WAAtB;AAIA,IAAM,UAAU,GAAG,CAAC,KAAD,CAAnB;AAEA,IAAM,SAAS,GAAwE,EAAvF;;AAEA,SAAS,YAAT,CAAsB,GAAtB,EAAiC;AAC/B,EAAA,SAAS,CAAC,OAAO,GAAP,KAAe,QAAhB,uDAA6E,GAA7E,CAAT;AACA,EAAA,SAAS,CAAC,GAAD,EAAM,8BAAN,CAAT;AACD;;IAGK,O;;;;;;;qCACa,I,EAAa,Q,EAAqB;AACjD,MAAA,SAAS,CACP,UAAU,CAAC,OAAX,CAAmB,IAAnB,MAA6B,CAAC,CADvB,mCAEwB,IAFxB,2BAAT;;AAIA,UAAM,cAAc,GAAsB,SAApC,cAAoC,CAAA,WAAW;AAAA,eACnD,QAAQ,CAAC;AAAE,UAAA,GAAG,EAAE,MAAM,CAAC,QAAP,CAAgB,IAAvB;AAA6B,UAAA,WAAW,EAAX;AAA7B,SAAD,CAD2C;AAAA,OAArD;;AAEA,MAAA,SAAS,CAAC,IAAV,CAAe;AAAE,QAAA,QAAQ,EAAR,QAAF;AAAY,QAAA,cAAc,EAAd;AAAZ,OAAf;AACA,MAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,cAAnC,EAAmD,KAAnD;AACD;;;wCAEmB,I,EAAa,Q,EAAqB;AACpD,MAAA,SAAS,CACP,UAAU,CAAC,OAAX,CAAmB,IAAnB,MAA6B,CAAC,CADvB,sCAE2B,IAF3B,4BAAT;AAIA,UAAM,aAAa,GAAG,SAAS,CAAC,SAAV,CAAoB,UAAA,IAAI;AAAA,eAAI,IAAI,CAAC,QAAL,KAAkB,QAAtB;AAAA,OAAxB,CAAtB;AACA,MAAA,SAAS,CACP,aAAa,KAAK,CAAC,CADZ,EAEP,8EAFO,CAAT;AAIA,UAAM,cAAc,GAAG,SAAS,CAAC,aAAD,CAAT,CAAyB,cAAhD;AACA,MAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,cAAtC,EAAsD,KAAtD;AACA,MAAA,SAAS,CAAC,MAAV,CAAiB,aAAjB,EAAgC,CAAhC;AACD;;;+BAEgB,G;;;;;AACf,cAAA,YAAY,CAAC,GAAD,CAAZ;;+CACO,I;;;;;;;;;;;;;;;;gDAIA,MAAM,CAAC,QAAP,CAAgB,I;;;;;;;;;;;4BAGX,G;;;;;AACZ,cAAA,YAAY,CAAC,GAAD,CAAZ;;AACA,cAAA,MAAM,CAAC,QAAP,CAAgB,IAAhB,GAAuB,GAAvB;;;;;;;;;;;;;;AAIJ,eAAe,IAAI,OAAJ,EAAf","sourcesContent":["import invariant from 'invariant';\n\nimport { URLListener, NativeURLListener } from './Linking.types';\n\nconst EventTypes = ['url'];\n\nconst listeners: Array<{ listener: URLListener; nativeListener: NativeURLListener }> = [];\n\nfunction _validateURL(url: string): void {\n  invariant(typeof url === 'string', `Invalid URL: should be a string. Instead found: ${url}`);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\n\n// TODO: Bacon: For better parity this should extend EventEmitter like React Native.\nclass Linking {\n  addEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.addEventListener(): ${type} is not a valid event`\n    );\n    const nativeListener: NativeURLListener = nativeEvent =>\n      listener({ url: window.location.href, nativeEvent });\n    listeners.push({ listener, nativeListener });\n    window.addEventListener('message', nativeListener, false);\n  }\n\n  removeEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.removeEventListener(): ${type} is not a valid event.`\n    );\n    const listenerIndex = listeners.findIndex(pair => pair.listener === listener);\n    invariant(\n      listenerIndex !== -1,\n      'Linking.removeEventListener(): cannot remove an unregistered event listener.'\n    );\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  }\n\n  async canOpenURL(url: string): Promise<boolean> {\n    _validateURL(url);\n    return true;\n  }\n\n  async getInitialURL(): Promise<string> {\n    return window.location.href;\n  }\n\n  async openURL(url: string): Promise<void> {\n    _validateURL(url);\n    window.location.href = url;\n  }\n}\n\nexport default new Linking();\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}