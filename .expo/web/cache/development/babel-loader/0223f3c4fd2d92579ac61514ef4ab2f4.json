{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExponentWebBrowser from \"./ExpoWebBrowser\";\nvar emptyCustomTabsPackages = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: []\n};\nexport function getCustomTabsSupportingBrowsersAsync() {\n  return _regeneratorRuntime.async(function getCustomTabsSupportingBrowsersAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n\n        case 2:\n          if (!(Platform.OS !== 'android')) {\n            _context.next = 6;\n            break;\n          }\n\n          return _context.abrupt(\"return\", emptyCustomTabsPackages);\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync());\n\n        case 8:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\nexport function warmUpAsync(browserPackage) {\n  return _regeneratorRuntime.async(function warmUpAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExponentWebBrowser.warmUpAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n\n        case 2:\n          if (!(Platform.OS !== 'android')) {\n            _context2.next = 6;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", {});\n\n        case 6:\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.warmUpAsync(browserPackage));\n\n        case 8:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}\nexport function mayInitWithUrlAsync(url, browserPackage) {\n  return _regeneratorRuntime.async(function mayInitWithUrlAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExponentWebBrowser.mayInitWithUrlAsync) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n\n        case 2:\n          if (!(Platform.OS !== 'android')) {\n            _context3.next = 6;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", {});\n\n        case 6:\n          _context3.next = 8;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage));\n\n        case 8:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n}\nexport function coolDownAsync(browserPackage) {\n  return _regeneratorRuntime.async(function coolDownAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExponentWebBrowser.coolDownAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n\n        case 2:\n          if (!(Platform.OS !== 'android')) {\n            _context4.next = 6;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", {});\n\n        case 6:\n          _context4.next = 8;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.coolDownAsync(browserPackage));\n\n        case 8:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  });\n}\nexport function openBrowserAsync(url) {\n  var browserParams,\n      _args5 = arguments;\n  return _regeneratorRuntime.async(function openBrowserAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          browserParams = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n\n          if (ExponentWebBrowser.openBrowserAsync) {\n            _context5.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n\n        case 3:\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.openBrowserAsync(url, browserParams));\n\n        case 5:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  });\n}\nexport function dismissBrowser() {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n\n  ExponentWebBrowser.dismissBrowser();\n}\nexport function openAuthSessionAsync(url, redirectUrl) {\n  return _regeneratorRuntime.async(function openAuthSessionAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!_authSessionIsNativelySupported()) {\n            _context6.next = 6;\n            break;\n          }\n\n          if (ExponentWebBrowser.openAuthSessionAsync) {\n            _context6.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n\n        case 3:\n          return _context6.abrupt(\"return\", ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl));\n\n        case 6:\n          return _context6.abrupt(\"return\", _openAuthSessionPolyfillAsync(url, redirectUrl));\n\n        case 7:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  });\n}\nexport function dismissAuthSession() {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\nfunction _authSessionIsNativelySupported() {\n  if (Platform.OS === 'android') {\n    return false;\n  }\n\n  var versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nvar _redirectHandler = null;\nvar _onWebBrowserCloseAndroid = null;\n\nfunction _onAppStateChangeAndroid(state) {\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nfunction _openBrowserAndWaitAndroidAsync(startUrl) {\n  var appStateChangedToActive, result, _await$openBrowserAsy, type;\n\n  return _regeneratorRuntime.async(function _openBrowserAndWaitAndroidAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          appStateChangedToActive = new Promise(function (resolve) {\n            _onWebBrowserCloseAndroid = resolve;\n            AppState.addEventListener('change', _onAppStateChangeAndroid);\n          });\n          result = {\n            type: 'cancel'\n          };\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(openBrowserAsync(startUrl));\n\n        case 4:\n          _await$openBrowserAsy = _context7.sent;\n          type = _await$openBrowserAsy.type;\n\n          if (!(type === 'opened')) {\n            _context7.next = 10;\n            break;\n          }\n\n          _context7.next = 9;\n          return _regeneratorRuntime.awrap(appStateChangedToActive);\n\n        case 9:\n          result = {\n            type: 'dismiss'\n          };\n\n        case 10:\n          AppState.removeEventListener('change', _onAppStateChangeAndroid);\n          _onWebBrowserCloseAndroid = null;\n          return _context7.abrupt(\"return\", result);\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  });\n}\n\nfunction _openAuthSessionPolyfillAsync(startUrl, returnUrl) {\n  return _regeneratorRuntime.async(function _openAuthSessionPolyfillAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (!_redirectHandler) {\n            _context8.next = 2;\n            break;\n          }\n\n          throw new Error(\"The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be\");\n\n        case 2:\n          if (!_onWebBrowserCloseAndroid) {\n            _context8.next = 4;\n            break;\n          }\n\n          throw new Error(\"WebBrowser is already open, only one can be open at a time\");\n\n        case 4:\n          _context8.prev = 4;\n\n          if (!(Platform.OS === 'android')) {\n            _context8.next = 11;\n            break;\n          }\n\n          _context8.next = 8;\n          return _regeneratorRuntime.awrap(Promise.race([_openBrowserAndWaitAndroidAsync(startUrl), _waitForRedirectAsync(returnUrl)]));\n\n        case 8:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 11:\n          _context8.next = 13;\n          return _regeneratorRuntime.awrap(Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]));\n\n        case 13:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 14:\n          _context8.prev = 14;\n\n          if (ExponentWebBrowser.dismissBrowser) {\n            ExponentWebBrowser.dismissBrowser();\n          }\n\n          _stopWaitingForRedirect();\n\n          return _context8.finish(14);\n\n        case 18:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, [[4,, 14, 18]]);\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\"The WebBrowser auth session is in an invalid state with no redirect handler when one should be set\");\n  }\n\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(function (resolve) {\n    _redirectHandler = function _redirectHandler(event) {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({\n          url: event.url,\n          type: 'success'\n        });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}","map":{"version":3,"sources":["../src/WebBrowser.ts"],"names":[],"mappings":"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","sourcesContent":["import { AppState, Linking, Platform, AppStateStatus } from 'react-native';\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExponentWebBrowser from './ExpoWebBrowser';\n\nimport {\n  RedirectEvent,\n  OpenBrowserOptions,\n  AuthSessionResult,\n  CustomTabsBrowsersResults,\n  BrowserResult,\n  RedirectResult,\n  MayInitWithUrlResult,\n  WarmUpResult,\n  CoolDownResult,\n} from './WebBrowser.types';\n\nconst emptyCustomTabsPackages: CustomTabsBrowsersResults = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: [],\n};\n\nexport async function getCustomTabsSupportingBrowsersAsync(): Promise<CustomTabsBrowsersResults> {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\n\nexport async function warmUpAsync(browserPackage?: string): Promise<WarmUpResult> {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\n\nexport async function mayInitWithUrlAsync(\n  url: string,\n  browserPackage?: string\n): Promise<MayInitWithUrlResult> {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\n\nexport async function coolDownAsync(browserPackage?: string): Promise<CoolDownResult> {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\n\nexport async function openBrowserAsync(\n  url: string,\n  browserParams: OpenBrowserOptions = {}\n): Promise<BrowserResult> {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n  return await ExponentWebBrowser.openBrowserAsync(url, browserParams);\n}\n\nexport function dismissBrowser(): void {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\n\nexport async function openAuthSessionAsync(\n  url: string,\n  redirectUrl: string\n): Promise<AuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl);\n  }\n}\n\nexport function dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler: ((event: RedirectEvent) => void) | null = null;\n\n/*\n * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n * it with AppState\n */\n\n// Store the `resolve` function from a Promise to fire when the AppState\n// returns to active\nlet _onWebBrowserCloseAndroid: null | (() => void) = null;\n\nfunction _onAppStateChangeAndroid(state: AppStateStatus) {\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nasync function _openBrowserAndWaitAndroidAsync(startUrl: string): Promise<BrowserResult> {\n  let appStateChangedToActive = new Promise(resolve => {\n    _onWebBrowserCloseAndroid = resolve;\n    AppState.addEventListener('change', _onAppStateChangeAndroid);\n  });\n\n  let result: BrowserResult = { type: 'cancel' };\n  let { type } = await openBrowserAsync(startUrl);\n\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = { type: 'dismiss' };\n  }\n\n  AppState.removeEventListener('change', _onAppStateChangeAndroid);\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string\n): Promise<AuthSessionResult> {\n  if (_redirectHandler) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(`WebBrowser is already open, only one can be open at a time`);\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([\n        _openBrowserAndWaitAndroidAsync(startUrl),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    } else {\n      return await Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n    }\n  } finally {\n    // We can't dismiss the browser on Android, only call this when it's available.\n    // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n\n    _stopWaitingForRedirect();\n  }\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\n      `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n    );\n  }\n\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl: string): Promise<RedirectResult> {\n  return new Promise(resolve => {\n    _redirectHandler = (event: RedirectEvent) => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}