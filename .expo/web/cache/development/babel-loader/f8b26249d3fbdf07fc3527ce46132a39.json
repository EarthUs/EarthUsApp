{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Constants from 'expo-constants';\nimport qs from 'qs';\nimport { openAuthSessionAsync, dismissAuthSession } from 'expo-web-browser';\nimport Linking from \"./Linking/Linking\";\nvar BASE_URL = \"https://auth.expo.io\";\nvar _authLock = false;\n\nfunction startAsync(options) {\n  var returnUrl, authUrl, startUrl, result, _parseUrl, params, errorCode;\n\n  return _regeneratorRuntime.async(function startAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          returnUrl = options.returnUrl || getDefaultReturnUrl();\n          authUrl = options.authUrl;\n          startUrl = getStartUrl(authUrl, returnUrl);\n\n          if (authUrl) {\n            _context.next = 5;\n            break;\n          }\n\n          throw new Error('No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n\n        case 5:\n          if (!_authLock) {\n            _context.next = 8;\n            break;\n          }\n\n          if (__DEV__) {\n            console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n          }\n\n          return _context.abrupt(\"return\", {\n            type: 'locked'\n          });\n\n        case 8:\n          _authLock = true;\n          _context.prev = 9;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(_openWebBrowserAsync(startUrl, returnUrl));\n\n        case 12:\n          result = _context.sent;\n\n        case 13:\n          _context.prev = 13;\n          _authLock = false;\n          return _context.finish(13);\n\n        case 16:\n          if (result) {\n            _context.next = 18;\n            break;\n          }\n\n          throw new Error('Unexpected missing AuthSession result');\n\n        case 18:\n          if (result.url) {\n            _context.next = 24;\n            break;\n          }\n\n          if (!result.type) {\n            _context.next = 23;\n            break;\n          }\n\n          return _context.abrupt(\"return\", result);\n\n        case 23:\n          throw new Error('Unexpected AuthSession result with missing type');\n\n        case 24:\n          _parseUrl = parseUrl(result.url), params = _parseUrl.params, errorCode = _parseUrl.errorCode;\n          return _context.abrupt(\"return\", {\n            type: errorCode ? 'error' : 'success',\n            params: params,\n            errorCode: errorCode,\n            url: result.url\n          });\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[9,, 13, 16]]);\n}\n\nfunction dismiss() {\n  dismissAuthSession();\n}\n\nfunction _openWebBrowserAsync(startUrl, returnUrl) {\n  var result;\n  return _regeneratorRuntime.async(function _openWebBrowserAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(openAuthSessionAsync(startUrl, returnUrl));\n\n        case 2:\n          result = _context2.sent;\n\n          if (!(result.type === 'cancel' || result.type === 'dismiss')) {\n            _context2.next = 5;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", {\n            type: result.type\n          });\n\n        case 5:\n          return _context2.abrupt(\"return\", result);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}\n\nfunction getStartUrl(authUrl, returnUrl) {\n  var queryString = qs.stringify({\n    authUrl: authUrl,\n    returnUrl: returnUrl\n  });\n  return getRedirectUrl() + \"/start?\" + queryString;\n}\n\nfunction getRedirectUrl() {\n  var redirectUrl = BASE_URL + \"/\" + Constants.manifest.id;\n\n  if (__DEV__) {\n    _warnIfAnonymous(Constants.manifest.id, redirectUrl);\n  }\n\n  return redirectUrl;\n}\n\nfunction getDefaultReturnUrl() {\n  return Linking.makeUrl('expo-auth-session');\n}\n\nfunction parseUrl(url) {\n  var parts = url.split('#');\n  var hash = parts[1];\n  var partsWithoutHash = parts[0].split('?');\n  var queryString = partsWithoutHash[partsWithoutHash.length - 1];\n  var parsedSearch = qs.parse(queryString);\n  var errorCode = parsedSearch.errorCode;\n  delete parsedSearch.errorCode;\n  var parsedHash = {};\n\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  var params = _objectSpread({}, parsedSearch, {}, parsedHash);\n\n  return {\n    errorCode: errorCode,\n    params: params\n  };\n}\n\nfunction _warnIfAnonymous(id, url) {\n  if (id.startsWith('@anonymous/')) {\n    console.warn(\"You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \\\"\" + url + \"\\\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.\");\n  }\n}\n\nexport default {\n  dismiss: dismiss,\n  getRedirectUrl: getRedirectUrl,\n  getStartUrl: getStartUrl,\n  getDefaultReturnUrl: getDefaultReturnUrl,\n\n  get getRedirectUri() {\n    console.warn('Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)');\n    return getRedirectUrl;\n  },\n\n  startAsync: startAsync\n};","map":{"version":3,"sources":["../src/AuthSession.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport qs from 'qs';\n\nimport { openAuthSessionAsync, dismissAuthSession } from 'expo-web-browser';\nimport Linking from './Linking/Linking';\n\ntype AuthSessionOptions = {\n  authUrl: string;\n  returnUrl?: string;\n};\n\ntype AuthSessionResult =\n  | { type: 'cancel' | 'dismiss' | 'locked' }\n  | {\n      type: 'error' | 'success';\n      errorCode: string | null;\n      params: { [key: string]: string };\n      url: string;\n    };\n\nconst BASE_URL = `https://auth.expo.io`;\nlet _authLock = false;\n\nasync function startAsync(options: AuthSessionOptions): Promise<AuthSessionResult> {\n  const returnUrl = options.returnUrl || getDefaultReturnUrl();\n  const authUrl = options.authUrl;\n  const startUrl = getStartUrl(authUrl, returnUrl);\n\n  // Prevent accidentally starting to an empty url\n  if (!authUrl) {\n    throw new Error(\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n  }\n\n  // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n  // support it this makes the behavior predictable.\n  if (_authLock) {\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n      );\n    }\n\n    return { type: 'locked' };\n  }\n\n  // About to start session, set lock\n  _authLock = true;\n\n  let result;\n  try {\n    result = await _openWebBrowserAsync(startUrl, returnUrl);\n  } finally {\n    // WebBrowser session complete, unset lock\n    _authLock = false;\n  }\n\n  // Handle failures\n  if (!result) {\n    throw new Error('Unexpected missing AuthSession result');\n  }\n  if (!result.url) {\n    if (result.type) {\n      return result;\n    } else {\n      throw new Error('Unexpected AuthSession result with missing type');\n    }\n  }\n\n  let { params, errorCode } = parseUrl(result.url);\n\n  return {\n    type: errorCode ? 'error' : 'success',\n    params,\n    errorCode,\n    url: result.url,\n  };\n}\n\nfunction dismiss() {\n  dismissAuthSession();\n}\n\nasync function _openWebBrowserAsync(startUrl, returnUrl) {\n  // $FlowIssue: Flow thinks the awaited result can be a promise\n  let result = await openAuthSessionAsync(startUrl, returnUrl);\n  if (result.type === 'cancel' || result.type === 'dismiss') {\n    return { type: result.type };\n  }\n\n  return result;\n}\n\nfunction getStartUrl(authUrl: string, returnUrl: string): string {\n  let queryString = qs.stringify({\n    authUrl,\n    returnUrl,\n  });\n\n  return `${getRedirectUrl()}/start?${queryString}`;\n}\n\nfunction getRedirectUrl(): string {\n  const redirectUrl = `${BASE_URL}/${Constants.manifest.id}`;\n  if (__DEV__) {\n    _warnIfAnonymous(Constants.manifest.id, redirectUrl);\n  }\n  return redirectUrl;\n}\n\nfunction getDefaultReturnUrl(): string {\n  return Linking.makeUrl('expo-auth-session');\n}\n\nfunction parseUrl(url: string): { errorCode: string | null; params: { [key: string]: string } } {\n  let parts = url.split('#');\n  let hash = parts[1];\n  let partsWithoutHash = parts[0].split('?');\n  let queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  // Get query string (?hello=world)\n  let parsedSearch = qs.parse(queryString);\n\n  // Pull errorCode off of params\n  let { errorCode } = parsedSearch;\n  delete parsedSearch.errorCode;\n\n  // Get hash (#abc=example)\n  let parsedHash = {};\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  // Merge search and hash\n  let params = {\n    ...parsedSearch,\n    ...parsedHash,\n  };\n\n  return {\n    errorCode,\n    params,\n  };\n}\n\nfunction _warnIfAnonymous(id, url): void {\n  if (id.startsWith('@anonymous/')) {\n    console.warn(\n      `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n    );\n  }\n}\n\nexport default {\n  dismiss,\n  getRedirectUrl,\n  getStartUrl,\n  getDefaultReturnUrl,\n  get getRedirectUri() {\n    console.warn(\n      'Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)'\n    );\n    return getRedirectUrl;\n  },\n  startAsync,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}